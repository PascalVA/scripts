#!/usr/bin/env python3

# /!\ THIS IS NOT SAFE FOR FILE NAMES CONTAINING SPACES /!\
#
# requirements:
# * exiftool
# * feh
#
# This script searches for a file called `imagedupes.log` in the user home
# directory. This file should be generated by findimagedupes.
#
# It will then make a list of all the files and open them in feh so the user
# can compare the files visually (to check for errors from findimagedupes)
# After, a list is presented and a user can choose a version to keep, delete
# all or skip the set of files.

# TODO: make input file a parameter or accept stream from stdin
# TODO: handle filenames containing spaces

import os
import subprocess

# read the file generated by imagedupes
with open(os.path.expanduser('~/imagedupes.log')) as f:
    lines = f.read().splitlines()

total_lines = len(lines)
for nr, line in enumerate(lines):
    files = line.split(" ")

    # clean up non-existing files before printing output
    _files = [f for f in files if os.path.isfile(f)]

    # Print information about the duplicates
    print('\n', '-' * 50, f'{nr}/{total_lines}', '-' * 50)
    if len(_files) <= 1:
        print('SKIPPED: no duplicates or no files found')
        continue
    print(
        'IDX'.ljust(4),
        'File'.ljust(170),
        'Size'.ljust(10),
        'Create Date'.ljust(20)
    )

    for i, f in enumerate(_files):
        # human readable index starting from 1
        hrindex = i + 1

        filepath = f.rstrip()
        filename = os.path.basename(filepath)
        fstat = os.stat(filepath)

        filesize = str(fstat.st_size).rstrip()
        create_date = subprocess.check_output(
            f'exiftool -T -DateTimeOriginal  "{filepath}"',
            shell=True).decode().rstrip()
        print(
            str(hrindex).ljust(4),
            filepath.ljust(170),
            filesize.ljust(10),
            create_date.ljust(20)
        )

    # show images with feh so we can make sure they are not mismatched
    subprocess.check_output(
        "feh -Z --scale-down {}".format(" ".join(_files)),
        shell=True)

    # prompt the user what to do
    while True:
        input_res = input('\nPlease enter one of the following:\n'
                          ' * The index of the file you want to keep.\n'
                          ' * Multiple indexes in csv (1, 4, 5, 10, ..)\n'
                          ' * "a" to delete all\n'
                          ' * "" (empty string) to skip. \n\n'
                          '> ')

        invalid = False

        keep_indexes = input_res.split(",")
        for keep_index in keep_indexes:
            try:
                keep_index = int(keep_index)
            except Exception:
                pass

            if keep_index not in list(range(1, len(_files)+1)) + ['a', '']:
                invalid = True
        if not invalid:
            break
        print('Invalid index!')

    if '' in keep_indexes:
        continue

    to_rm = []
    if 'a' not in keep_indexes:
        for i, f in enumerate(_files):
            if str(i+1) not in keep_indexes:
                to_rm.append(f)
    else:
        to_rm = _files

    for f in to_rm:
        subprocess.call(f'rm {f}', shell=True)
        print(f'Removed file: {f})')
